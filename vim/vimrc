" ==================================================
" ==================================================

" ==  ##    ##  ##  ##      ##   ####      ####   ==
" ==  ##    ##  ##  ###    ###  ######    ######  ==
" ==  ##    ##      ####  ####  ##   ##  ##       ==
" ==  ###  ###  ##  ## #### ##  ######   ##       ==
" ==   ######   ##  ##  ##  ##  ##   ##   ######  ==
" ==     ##     ##  ##      ##  ##   ##    ####   ==

" ==================================================
" ==================================================

" disable vi compatibilities
if &compatible
  set nocompatible
endif

" Functions {{{

" use to create some directories
function! s:create_dir_if_not_exist(dir)
  if isdirectory(a:dir)
    return
  endif

  call mkdir(a:dir, "p")
endfunction

" }}}
" Plugged {{{

call plug#begin('~/.vim/plugged')
Plug 'mhinz/vim-startify'           " Nouveau écran d'acceuil
Plug 'itchyny/lightline.vim'        " Nouvelle barre de status
Plug 'scrooloose/nerdtree'          " Voir arborescence
Plug 'ryanoasis/vim-devicons'       " Icones supplémentaires
Plug 'sheerun/vim-polyglot'         " language packs
Plug 'tpope/vim-endwise'            " fermeture des blocs
call plug#end()

" }}}
" Settings {{{

" - Buffers {{{

" allow buffers to have changes without being displayed
set hidden

" }}}
" - Confirm {{{

" prompt instead of just rejecting risky :write, :saveas
set confirm

" }}}
" - Encoding {{{

if has('multi_byte') && !exists('$LANG')
  " use UTF-8 if possible
  set encoding=utf-8
  set fileencoding=utf-8
endif

" }}}
" - Map {{{

" <leader>
let mapleader =  ','

" a bit longer to complete mappings
set timeoutlen=5000

" }}}
" - History {{{

" more command and search history
set history=2000

" viminfo
" '100  - conserver jusqu'à 100 commandes de la ligne de commande
" <50   - conserver jusqu'à 50 lignes de chaque fichier ouvert
" s100  - conserver jusqu'à 100 marque-pages
" h     - conserver l'historique des recherches
set viminfo='100,<50,s100,h
set viminfofile=~/.viminfo
" TODO
"set shada='100,<50,s100,h

" }}}
" - Cache {{{

" cache directory can contain
" - swap files
" - baskup files
" - undo files

let g:cachedir = '.cache'

" cache options
set swapfile
set backup
if has('persistent_undo')
  set undofile
endif

" to prevent conflicts between vim cache and nvim cache
if has('nvim')
  let g:cachedir = g:cachedir . "/nvim"
else
  let g:cachedir = g:cachedir . "/vim"
endi

" create cache dir
call s:create_dir_if_not_exist(g:cachedir)

" create and set the swap dir
if &swapfile
  let s:my_swapdir = g:cachedir . "/swaps"
  call s:create_dir_if_not_exist(s:my_swapdir)
  execute "set directory=" . s:my_swapdir
endif

" create and set the backup dir
if &backup
  let s:my_backdir = g:cachedir . "/backups"
  call s:create_dir_if_not_exist(s:my_backdir)
  execute "set backupdir=" . s:my_backdir
endif

" create and set the undo dir
if &undofile
  let s:my_undodir = g:cachedir . "/undos"
  call s:create_dir_if_not_exist(s:my_undodir)
  execute "set undodir=" . s:my_undodir
endif

" }}}
" - Syntax {{{

if has('syntax')
  " enable highlight based on syntax
  syntax on
endif

" completion based on syntax
set omnifunc=syntaxcomplete#Complete

" }}}
" - Colorscheme {{{

colorscheme minimaldark256

" }}}
" - Textarea {{{

set ttyfast                 " faster scroll
set laststatus=2            " show status bar
set ruler                   " show cursor position on status bar
set showcmd                 " show command on status bar
set showmode                " show mode on status bar
set shortmess+=I            " don't show startup splash screen (I donated)
set number                  " show line numbers
set relativenumber          " show relative number from cursor
set cc=100                  " show column limit to break
set cursorline              " show cursor line
set cursorcolumn            " show cursor column
set signcolumn=auto         " show column sign
set linebreak               " break the line at word boundaries
set showbreak=...           " linebreak prefix
set list                    " show hidden chars
set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:_
set fillchars=eob:~,fold:-,foldopen:+,foldclose:-

" }}}
" - Cursor {{{

"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar

let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

" }}}
" - Matching {{{

set regexpengine=1
set hlsearch                " highlight completed search
set incsearch               " show search matches as I type my pattern
set ignorecase              " ignore case during search
set smartcase               " override the ignore case when capital letters
"set showmatch               " briefly jump to the matching one bracket
set noshowmatch             " disabled match parenthese
let g:loaded_matchparen = 1 " stop matchparen plugin

" }}}
" - Wildmenu {{{

if has('wildmenu')
  set wildmenu
  set wildmode=list:full,full
  set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xls
endif

" }}}
" - Indentation {{{

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
if has('filetype')
 filetype indent plugin on
endif

" automatically adjust indentation based on the syntax and context of the code
if has('smartindent')
  set smartindent
endif

if has('cindent')
  set cindent
endif

" the all important default indent settings;
" filtetypes to tweak
set autoindent                " indent of previous line on new lines
set expandtab                 " use spaces instead of tabs
set shiftwidth=4              " indent size
set softtabstop=4             " tab key size

" }}}
" - Other features {{{

if has('clipboard')
  " use system clipboard
  set clipboard=unnamedplus
endif

if has('mouse')
  " mouse for all modes
  set mouse=a
endif

" }}}

" }}}

runtime! custom/maps.vim
runtime! custom/cmds.vim
runtime! custom/autocmds.vim

