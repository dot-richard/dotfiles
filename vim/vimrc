" ..................................................
" ..................................................

" ..  ##    ##  ##  ##      ##   ####      ####   ..
" ..  ##    ##  ##  ###    ###  ######    ######  ..
" ..  ##    ##      ####  ####  ##   ##  ##       ..
" ..  ###  ###  ##  ## #### ##  ######   ##       ..
" ..   ######   ##  ##  ##  ##  ##   ##   ######  ..
" ..     ##     ##  ##      ##  ##   ##    ####   ..

" ..................................................
" ..................................................

" {{{ include la configuration par default

"unlet! skip_defaults_vim
"source $VIMRUNTIME/defaults.vim

" }}}

" {{{ Plugins

call plug#begin('~/.config/vim/plugged')
"Plug 'dot-richard/minimaldark256'   " MY colorscheme
Plug 'itchyny/lightline.vim'        " Nouvelle barre de status
Plug 'mhinz/vim-startify'           " Nouveau écran d'acceuil
Plug 'ryanoasis/vim-devicons'       " Ajouter des icones
Plug 'scrooloose/nerdtree'          " Voir arborescence projet
"Plug 'brooth/far.vim'               " Recherche
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'            " fermeture des blocs
Plug 'tpope/vim-surround'
"Plug 'tpope/vim-rake'
"Plug 'honza/vim-snippets'
"Plug 'sheerun/vim-polyglot'
"Plug 'ecomba/vim-ruby-refactoring'
"Plug 'jiangmiao/auto-pairs'
call plug#end()

" }}}

" {{{ Map Leader

let mapleader =  ','

" }}}

" {{{ colorscheme

colorscheme minimaldark256

"}}}

" {{{ Interface

set encoding=utf-8
set fileencoding=utf-8
set ruler
set number
set relativenumber
set cc=100
set cursorline
set cursorcolumn
set signcolumn=auto
set foldmethod=marker
set foldcolumn=1
set noshowmatch
let g:loaded_matchparen = 1     " desactiver les parenthèses
set ttyfast
set clipboard=unnamedplus
set mouse=v
set list
set listchars=tab:>-,trail:~,extends:>,precedes:<,nbsp:_
set fillchars=eob:~,fold:-,foldopen:+,foldclose:-
set showmatch
set hlsearch
set incsearch
set ignorecase
set smartcase

" }}}

" {{{ status bar

set laststatus=2
set showcmd
set showmode

" lightline
let g:lightline = {
\   'active': {
\       'left': [
\           [ 'mode', 'paste' ],
\           [ 'readonly', 'filename', 'modified' ]
\       ]
\   },
\
\   'component_function': {
\       'filename': 'LightlineFilename',
\       'gitbranch': 'FugitiveHead'
\   }
\ }
" }}}

" {{{ indentation

set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4
set smartindent

" }}}

" {{{ completions

filetype plugin indent on
set omnifunc=syntaxcomplete#Complete
set wildmenu
set wildmode=list:full,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xls

" }}}

" {{{ fichiers

set hidden
set undofile
set backup
set swapfile

" Répertoire pour les fichiers de swap
if &swapfile
    let g:swap_dir = $HOME . '/.vim/swaps'
    call mkdir(g:swap_dir, 'p')
    execute 'set directory^=' . g:swap_dir
endif

" Répertoire pour les sauvegardes
if &backup
    let g:back_dir = $HOME . '/.vim/backups'
    call mkdir(g:back_dir, 'p')
    execute 'set backupdir^=' . g:back_dir
endif

" Répertoire pour les fichiers d'undo
if &undofile
    let g:undo_dir = $HOME . '/.vim/undos'
    call mkdir(g:undo_dir, 'p')
    execute 'set undodir^=' . g:undo_dir
endif

" }}}

" {{{ arreter la surbrillance en mode recherche

nnoremap <silent> <leader>n :nohlsearch<CR>

" }}}

" {{{ Remove trails space

" Auto efface les queues d'espaces avant sauvegarde :
"autocmd BufWritePre * %s/\s\+$//e " probleme avec les diacritiques
autocmd BufWritePre * %s/ \+$//e

" }}}

" {{{ se souvenir de la dernière position du curseur

" from default.vim
augroup remember_cursor_position
    autocmd!
    autocmd BufReadPost *
    \ let line = line("'\"")
    \ | if line >= 1 && line <= line("$") && &filetype !~# 'commit'
    \      && index(['xxd', 'gitrebase'], &filetype) == -1
    \ |   execute "normal! g`\""
    \ | endif
augroup END

" }}}

" {{{ html indentation

autocmd FileType html setlocal shiftwidth=2
autocmd FileType html setlocal tabstop=2
autocmd FileType html setlocal softtabstop=2

" }}}

" {{{ NERDTree

map <C-n> :NERDTreeToggle<CR>
command NT NERDTree
let g:NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$']

" }}}

" {{{ dispatch

command! Ruby :Dispatch ruby %
command! Irb :Dispatch irb %

" }}}
